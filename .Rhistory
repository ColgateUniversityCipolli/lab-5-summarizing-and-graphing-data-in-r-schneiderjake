filtered.feature.compairisons <- feature.compairisons |>
filter(description == "Within Range")
getwd()
getwd()
library(tidyverse)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
filtered.results <- results |>
filter(description == "Within Range")
library(tidyverse)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
filtered.compared.features <- compared.features |>
filter(description == "Within Range")
view(filtered.compared.features)
view(filtered.compared.features)
spectrogram.analysis <- filtered.compared.features |>
filter(feature == "overall_loudness" & "electronic")
spectrogram.analysis <- filtered.compared.features |>
filter(feature == "overall_loudness")
View(spectrogram.analysis)
filtered.compared.features <- compared.features |>
filter(description == "Within Range")
spectrogram.analysis <- filtered.compared.features |>
filter(feature == "overall_loudness" & feature == "spectral_energy" & feature == "danceability" & feature == "beats_loudness")
humantone.analysis <- filtered.compared.features |>
filter(feature == "instrumental" & feature == "electronic" & feature == "acoustic" & feature == "beats_loudness")
lyrical.analysis <- filtered.compared.features |>
filter(feature == "WC" & feature == "Tone" & feature == "BigWords" & feature == "WPS")
View(spectrogram.analysis)
spectrogram.analysis <- filtered.compared.features |>
filter(feature == "overall_loudness" | feature == "spectral_energy" | feature == "danceability" | feature == "beats_loudness")
View(spectrogram.analysis)
boxplot(spectrogram.analysis)
view(compared.features)
library(tidyverse)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
View(compared.features)
?xtable()
library(tidyverse)
?xtable()
xtable
install.packages("xtable")
?xtable()
library(tidyverse)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
compared.features.filtered <- compared.features|>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "tone" | feature == "WC" | feature == "happy")
view(compared.features.filtered)
compared.features.filtered <- compared.features|>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
view(compared.features.filtered)
library(xtable)
?xtable()
compared.features.filtered.table <- xtable(compared.features.filtered)
print(compared.features.filtered.table)
compared.features.filtered.table <- xtable(compared.features.filtered,
caption = "Artist Features Being Compared to Allentown",
label = "compared.features.xtable")
ggplot(data=compared.features.filtered, aes(x = artist, y = allentown.data))+
geom_boxplot(aes(fill=artist))+
geom_point(color= "blue", size = 3, alpha = .8)+
facet(~feature, scales= "free_y")+
labs(
title = "Allentown Features Vs. Band Distribution features",
x = "artist",
y = "Feature Value"
)
ggplot(data=compared.features.filtered, aes(x = artist, y = allentown.data))+
geom_boxplot(aes(fill=artist))+
geom_point(color= "blue", size = 3, alpha = .8)+
facet_wrap(~feature, scales= "free_y")+
labs(
title = "Allentown Features Vs. Band Distribution features",
x = "artist",
y = "Feature Value"
)
ggplot(data=compared.features.filtered.table, aes(x = artist, y = allentown_value))+
geom_boxplot(aes(fill=artist), outliers = "red")+
geom_point(aes(y = allentown_value), color= "blue", size = 3, alpha = .8)+
facet_wrap(~feature, scales= "free_y")+
labs(
title = "Allentown Features Vs. Band Distribution features",
x = "artist",
y = "Feature Value"
)
ggplot(data=compared.features.filtered.table, aes(x = artist, y = allentown_value))+
geom_boxplot(aes(fill=artist), outliers = TRUE , outlier.colour = "red")+
geom_point(aes(y = allentown_value), color= "blue", size = 3, alpha = .8)+
facet_wrap(~feature, scales= "free_y")+
labs(
title = "Allentown Features Vs. Band Distribution features",
x = "artist",
y = "Feature Value"
)
ggplot(data=compared.features.filtered.table, aes(x = artist, y = allentown.feature))+
geom_boxplot(aes(fill=artist), outliers = TRUE , outlier.colour = "red")+
geom_point(aes(y = allentown.feature), color= "blue", size = 3, alpha = .8)+
facet_wrap(~feature, scales= "free_y")+
labs(
title = "Allentown Features Vs. Band Distribution features",
x = "artist",
y = "Feature Value"
)
ggplot(data = compared.features.filtered, aes(x = artist, y = allentown_value)) +
geom_boxplot(aes(fill = artist), outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Includes outliers
facet_wrap(~ feature, scales = "free_y") +  # One boxplot per feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
) +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = compared.features.filtered, aes(x = artist,)) +
geom_boxplot(aes(fill = artist), outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Includes outliers
facet_wrap(~ feature, scales = "free_y") +  # One boxplot per feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
) +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
?ggplot()
ggplot(data = compared.features.filtered.table, aes(x=artist), y =features.numeric )+
geom_boxplot(width = .5 , outliers = TRUE)+
facet_wrap(~feature, scales = "free_y")
ggplot(data = compared.features.filtered, aes(x=artist), y =features.numeric )+
geom_boxplot(width = .5 , outliers = TRUE)+
facet_wrap(~feature, scales = "free_y")
ggplot(data = compared.features.filtered, aes(x=artist), y = feature )+
geom_boxplot(width = .5 , outliers = TRUE)+
facet_wrap(~feature, scales = "free_y")
View(compared.features.filtered)
essentia.data.pivoted <- essentia.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value")
view(essentia.data.pivoted)
view(essentia.data)
ggplot(data = essentia.data.pivoted, aes(x=artist), y = value, fill = artist )+
geom_boxplot(width = .5 , outliers = TRUE)+
facet_wrap(~feature, scales = "free_y")
ggplot(data = essentia.data.pivoted, aes(x=artist), y = value, fill = artist )+
geom_boxplot(width = .5 , outliers = TRUE)+
facet_wrap(~feature, scales = "free_y")
ggplot(data = essentia_long, aes(x = artist, y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
)
ggplot(data = essentia.data.pivoted, aes(x = artist, y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
) +
essentia.data.pivoted <- essentia.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
essentia.data.pivoted <- essentia.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
view(essentia.data.pivoted)
ggplot(data = essentia.data.pivoted, aes(x = artist, y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
x = "Artist",
y = "Feature Value"
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank()  # Remove x-axis tick marks
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank()  # Remove x-axis tick marks
)
allentown.data.pivoted <- allentown.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
geom_boxplot(data = allentown.data.pivoted, aes(y=value), color = "black", size = 2) +
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank()  # Remove x-axis tick marks
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y") +  # Different y-axis scale for each feature
geom_boxplot(data = allentown.data.pivoted, aes(y=value), color = "black", size = .5) +
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank()  # Remove x-axis tick marks
)
library(tidyverse)
library(xtable)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
compared.features.filtered <- compared.features|>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
compared.features.filtered.table <- xtable(compared.features.filtered,
caption = "Artist Features Being Compared to Allentown",
label = "compared.features.xtable")
essentia.data.pivoted <- essentia.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
allentown.data.pivoted <- allentown.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y", ncol = 4 ) +  # Different y-axis scale for each feature
geom_boxplot(data = allentown.data.pivoted, aes(y=value), color = "black", size = .35) +
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank()  # Remove x-axis tick marks
legend.position = "bottom"
library(tidyverse)
library(xtable)
#open our csv files
essentia.data <- read_csv("data/essentia.data.csv")
allentown.data <- read_csv("data/essentia.data.allentown.csv")
#this creates an object for us with all of the numeric column names
features.numeric <- names(essentia.data)[sapply(essentia.data, is.numeric)]
#creating an empty tibble to store our results in
compared.features <- tibble()
for(feature in features.numeric){
essentia.data.grouped <- essentia.data %>%
group_by(artist) %>%
#we are summarizing out data and creating min, max, upper and lower forks for each feature of the song
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), .25, na.rm = TRUE) - (1.5 * IQR(get(feature), na.rm = TRUE)),
UF = quantile(get(feature), .75, na.rm = TRUE) + (1.5 * IQR(get(feature), na.rm = TRUE)),
max = max(get(feature), na.rm = TRUE)
)
allentown.feature <- allentown.data[[feature]] #we compare the 5 number summary of that feature to allentown
essentia.data.grouped <- essentia.data.grouped %>%
mutate(
out.of.range = allentown.feature < min | allentown.feature > max ,
unusual = allentown.feature < LF | allentown.feature > UF ,
description = case_when(
out.of.range ~ "Out Of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
),
feature = feature
)
compared.features <- bind_rows(compared.features, essentia.data.grouped)
}
compared.features.filtered <- compared.features|>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
compared.features.filtered.table <- xtable(compared.features.filtered,
caption = "Artist Features Being Compared to Allentown",
label = "compared.features.xtable")
essentia.data.pivoted <- essentia.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
allentown.data.pivoted <- allentown.data |>
pivot_longer(cols = all_of(features.numeric), names_to = "feature", values_to = "value") |>
filter(feature == "overall_loudness" | feature == "tempo" | feature == "duration" | feature == "beats_count" |
feature == "beats_loudness" | feature == "tuning_frequency" | feature == "acoustic" | feature == "electronic" |
feature == "danceability" | feature == "Tone" | feature == "WC" | feature == "happy")
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y", ncol = 4 ) +  # Different y-axis scale for each feature
geom_boxplot(data = allentown.data.pivoted, aes(y=value), color = "black", size = .35) +
labs(
title = "Feature Distributions Across Artists",
y = "Feature Value"
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank(),  # Remove x-axis tick marks
legend.position = "bottom"
)
ggplot(data = essentia.data.pivoted, aes(y = value, fill = artist)) +
geom_boxplot(width = 0.5, outlier.colour = "red", outlier.shape = 16, outlier.size = 1.5) +
facet_wrap(~ feature, scales = "free_y", ncol = 4 ) +  # Different y-axis scale for each feature
geom_boxplot(data = allentown.data.pivoted, aes(y=value), color = "black", size = .4) +
labs(
title = "Feature Distributions Across Artists",
)+
theme_minimal() +
theme(
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank(),  # Remove x-axis tick marks
legend.position = "bottom"
)
